
/*
 * File responsible for starting Hyperbuild.
 */





/*
 * Checking if this is a download, and if so, initiating download of file,
 * and returning early.
 */
p5.web.query.get:filename
if:x:/@p5.web.query.get/*?value

  /*
   * User is trying to download a file, first setting "Content-Disposition" header.
   */
  p5.web.header.set:Content-Disposition
    src:@"attachment; filename=""{0}"""
      :x:/@p5.web.query.get/*?value

  /*
   * Then setting "Content-Type" for file, which depends upon whether or not file
   * is a .zip file or a .pgp file.
   */
  split:x:/@p5.web.query.get/*?value
    =:.
  if:x:/@split/0/-?name
    =:zip

    /*
     * Zip file.
     */
    p5.web.header.set:Content-Type
      src:application/zip
    p5.web.header.set:Content-Transfer-Encoding
      src:binary

  else

    /*
     * Cryptographically signed zip file (.pgp).
     */
    p5.web.header.set:Content-Type
      src:application/x-pgp

  /*
   * Echoing file to client, and returning early.
   */
  p5.web.echo-file:~/temp/hyperbuild-output/{0}
    :x:/@p5.web.query.get/*?value
  return





/*
 * Including Micro, adding Awesome Fonts and serious skin.
 */
p5.web.include-css-file:@MICRO/media/main.css
p5.web.include-css-file:@MICRO/media/ext.css
p5.web.include-css-file:@MICRO/media/fonts.css
p5.web.include-css-file:@MICRO/media/skins/serious.css





/*
 * Verifying user is logged in as root, and if not, 
 * forcing the user to login before we proceed.
 */
whoami
if:x:/@whoami/*/role?value
  !=:root

  /*
   * User is not logged in as root.
   */
  p5.core.login

  /*
   * Returning early to abort evaluating the rest of our file.
   */
  return





/*
 * Iterating through all "/modules/", and creating a check box for each in our
 * wizard form.
 */
list-folders:/modules/
for-each:x:/@list-folders/*?name
  split:x:/@_dp?value
    =:/

  /*
   * Making sure we check Micro and Bazar by default.
   */
  if:x:/@split/0/-?name
    =:bazar
    or:x:/@split/0/-?name
      =:micro
    add:x:/..for-each/*/add/*/*
      src:checked
  eval-x:x:/+/*/*/*
  add:x:/../*/create-widget/**/micro.widgets.wizard-form
    src
      checkbox
        .data-field:x:/@split/0/-?name
        info:x:/@split/0/-?name





/*
 * Creating main content container.
 */
create-widget:hyperbuild-main-container
  class:container
  widgets
    micro.widgets.obscurer:build-obscurer
      style:"display:none;"
      message:"Please wait while we create your build ..."
    div
      class:row
      widgets
        div
          class:col-100
          widgets
            div
              class:shaded rounded air-inner
              style:"position:relative;"
              widgets
                a
                  innerValue:@"<span class=""icon-home""></span>"
                  style:"position:absolute;top:0;right:0;padding:12px 45px;font-size:1.2rem;border-bottom-left-radius:5px;border-left:solid 1px rgba(0,0,0,.3);border-bottom:solid 1px rgba(0,0,0,.3);background:linear-gradient(#fefefe, #f0f0f0);"
                  oninit

                    /*
                     * Making sure we get href attribute correctly.
                     */
                    p5.web.get-root-location
                    set-widget-property:x:/../*/_event?value
                      href:x:/@p5.web.get-root-location?value

                h3
                  innerValue:Hyperbuild
                micro.widgets.wizard-form:modules
                  p
                    innerValue:@"Choose the modules you wish to include in your main distribution, and supply the fingerprint/password of which PGP key
you want to cryptographically sign the rest of your modules with. If you don't want to cryptographically sign any modules, just leave the password field blank."
                  select:pgp-key
                    .data-field:fingerprint
                    info:PGP key
                    title:Choose your PGP key's fingerprint here
                    oninit

                      /*
                       * Creating one "option" widget for each private key in GnuPG database.
                       */
                      p5.crypto.list-private-keys
                      for-each:x:/-/*
                        create-widget
                          parent:x:/../*/_event?value
                          element:option
                          innerValue:x:/@_dp/#?name

                  text:pgp-pwd
                    .data-field:password
                    info:Password
                    type:password
                    title:Supply your PGP key's password here, or leave it empty if you don't want to cryptographically sign your modules.
                    autocomplete:new-password
                    onkeydown:@"if (event.keyCode == 13) {p5.$('start-build').raise('onclick');return false;}"
                    oninit

                      /*
                       * Setting initial focus to password textbox.
                       */
                      micro.page.set-focus:x:/../*/_event?value

                div
                  class:right
                  widgets
                    button:start-build
                      innerValue:Start build
                      style:"margin-bottom:0;"
                      onclick

                        /*
                         * Making sure we show obscurer, for then to invoke "real" implementation.
                         */
                        set-widget-property:build-obscurer
                          style:"display:block;"
                        p5.web.send-javascript:@"p5.$('start-build').raise('.onclick');"

                      .onclick

                        /*
                         * Serializing above wizard-form, to figure out which modules user
                         * wants to include in his main build.
                         */
                        micro.widgets.wizard-form.value:modules

                        /*
                         * Wrapping invocation in a try/catch block, in case an exception occurs.
                         */
                        try

                          /*
                           * Evaluating file responsible for creating a build for us.
                           */
                          add:x:/..try/*/micro.evaluate.file/*/modules
                            src:x:@"/@micro.widgets.wizard-form.value/*/""=:bool:true""?name"
                          add:x:/..try/*/micro.evaluate.file
                            src:x:/@micro.widgets.wizard-form.value/*(/fingerprint|/password)
                          micro.evaluate.file:@HYPERBUILD/build.hl
                            modules

                          /*
                           * Hiding obscurer again, and providing feedback to user.
                           */
                          set-widget-property:build-obscurer
                            style:"display:none;"
                          micro.windows.info:Build was successfully completed
                            class:micro-windows-info success

                        catch

                          /*
                           * Hiding obscurer again, and showing exception message to user.
                           */
                          set-widget-property:build-obscurer
                            style:"display:none;"
                          micro.windows.info:x:/..catch/*/message?value
                            class:micro-windows-info warning

                div:output
                  widgets
