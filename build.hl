
/*
 * File responsible for creating a build.
 *
 * Node below is used to separate the arguments supplued during invocation from
 * the rest of the file.
 */
.signal





/*
 * Clearing result widget.
 */
clear-widget:output





/*
 * Deleting any previous "output folders", if they exist.
 */
if
  fetch:x:/0/0?value
    folder-exists:~/temp/hyperbuild-output/

  /*
   * Folder exists from before.
   */
  delete-folder:~/temp/hyperbuild-output/





/*
 * Creating a temporary output folder.
 */
create-folder:~/temp/hyperbuild-output/





/*
 * Creating a "/p5/" folder inside of our temp output folder, which will hold
 * our main p5.website content.
 */
create-folder:~/temp/hyperbuild-output/p5/





/*
 * Copying all relevant files into output folder.
 *
 * First creating our "/bin/" folder, and copying all DLLs.
 */
create-folder:~/temp/hyperbuild-output/p5/bin/
list-files:/bin/
  filter:.dll
copy-file:x:/@list-files/*?name
  dest:~/temp/hyperbuild-output/p5/bin/





/*
 * Copying main Default.aspx file.
 */
copy-file:/Default.aspx
  dest:~/temp/hyperbuild-output/p5/





/*
 * Copying our Global.asax file.
 */
copy-file:/Global.asax
  dest:~/temp/hyperbuild-output/p5/





/*
 * Copying README.md
 */
copy-file:/README.md
  dest:~/temp/hyperbuild-output/p5/





/*
 * Copying startup.hl
 */
copy-file:/startup.hl
  dest:~/temp/hyperbuild-output/p5/





/*
 * Copying our "/desktop/" folder.
 */
copy-folder:/desktop/
  dest:~/temp/hyperbuild-output/p5/desktop/





/*
 * Copying our "/modules/" folder.
 */
copy-folder:/modules/
  dest:~/temp/hyperbuild-output/p5/modules/





/*
 * Deleting any ".git" folders, and ".gitignore" files within modules.
 */
list-folders:~/temp/hyperbuild-output/p5/modules/
list-files:x:/@list-folders/*?name
  filter:.gitignore
delete-file:x:/@list-files/*?name
list-folders:x:/@list-folders/*?name
delete-folder:x:@"/@list-folders/*/""~/.git/"""





/*
 * Figuring out which modules caller wanted to include in the main release, and
 * removing everything else from the main "/modules/" folder in our build.
 */
list-folders:~/temp/hyperbuild-output/p5/modules/
for-each:x:/@list-folders/*?name
  split:x:/@_dp?value
    =:/
  if:x:/@.signal/--/signed/*/{0}
    :x:/@split/0/-?name

    /*
     * Caller wanted to include currently iterated folder as a module in
     * his core release.
     *
     * Therefor, we wrap it into a zip file, and cryptographically sign our zip file,
     * with the specified PGP key.
     */
    zip:~/temp/hyperbuild-output/{0}.zip
      :x:/@split/0/-?name
      src:~/temp/hyperbuild-output/p5/modules/{0}/
        :x:/@split/0/-?name

    /*
     * Notice, if no password is supplied, we entirely drop the signing process of
     * our zip files, and just leave them as they are.
     */
    if:x:/../*/password?value
      !=:

      /*
       * Now we can cryptographically sign the module, with the specified PGP key,
       * extracting it from our GnuPG context, using the supplied password.
       */
      eval-x:x:/+|/+/**
      p5.mime.save:~/temp/hyperbuild-output/{0}.zip.pgp
        :x:/@split/0/-?name
        application:zip
          filename:~/temp/hyperbuild-output/{0}.zip
            :x:/@split/0/-?name
          sign
            fingerprint:x:/../*/fingerprint?value
              password:x:/../*/password?value

      /*
       * Deleting zip file.
       */
      delete-file:~/temp/hyperbuild-output/{0}.zip
        :x:/@split/0/-?name

  /*
   * Then we delete the module from the main release, unless user for some reasons
   * wanted to also distribute it in his main binaries.zip file.
   */
  if:x:/@.signal/--/modules/*/{0}
    :x:/@split/0/-?name
    not
    delete-folder:~/temp/hyperbuild-output/p5/modules/{0}/
      :x:/@split/0/-?name





/*
 * Creating our default "/users/" folder structure.
 */
create-folder:~/temp/hyperbuild-output/p5/users/
create-folder:~/temp/hyperbuild-output/p5/users/root/
create-folder:~/temp/hyperbuild-output/p5/users/root/temp/
save-file:~/temp/hyperbuild-output/p5/users/root/temp/README.md
  src:"Temporary folder"
create-folder:~/temp/hyperbuild-output/p5/users/root/documents/
create-folder:~/temp/hyperbuild-output/p5/users/root/documents/private/
save-file:~/temp/hyperbuild-output/p5/users/root/documents/private/README.md
  src:"Private files"
create-folder:~/temp/hyperbuild-output/p5/users/root/documents/public/
save-file:~/temp/hyperbuild-output/p5/users/root/documents/public/README.md
  src:"Public files"





/*
 * Creating our default "/common/" folder structure.
 */
create-folder:~/temp/hyperbuild-output/p5/common/
create-folder:~/temp/hyperbuild-output/p5/common/documents/
create-folder:~/temp/hyperbuild-output/p5/common/documents/private/
save-file:~/temp/hyperbuild-output/p5/common/documents/private/README.md
  src:"Common public files"
create-folder:~/temp/hyperbuild-output/p5/common/documents/public/
save-file:~/temp/hyperbuild-output/p5/common/documents/public/README.md
  src:"Common private files"





/*
 * Finally we create our ZIP file, notice, we avoid copying the web.config into
 * the resulting folder, but instead choose to directly put it into the ZIP file,
 * to avoid having our application pool recycle due to a new web.config.
 */
list-files::~/temp/hyperbuild-output/p5/
list-folders:~/temp/hyperbuild-output/p5/
for-each:x:(/@list-files|/@list-folders)/*?name
  eval-x:x:/+/*/*
  add:x:/../*/zip
    src
      src:x:/@_dp?value
zip:~/temp/hyperbuild-output/binaries.zip
  src:/web.config





/*
 * When the build is done, we create all links to download all resulting files.
 */
create-widget
  parent:output
  element:hr
  style:"margin-top:1rem;"
list-files:~/temp/hyperbuild-output/
  filter:.zip|.pgp
for-each:x:/@list-files/*?name

  /*
   * Figuring out filename.
   */
  split:x:/@_dp?value
    =:/
  eval-x:x:/+/**/.file
  create-widget
    parent:output
    element:a
    style:"display:block;float:left;margin-right:25px;margin-bottom:1rem;"
    href:#
    innerValue:x:/@split/0/-?name
    onclick

      /*
       * Forward evaluated above.
       */
      .file:x:/@split/0/-?name

      /*
       * Initiating download.
       */
      p5.web.get-location-url
      p5.html.url-encode:x:/@.file?value
      p5.web.set-location:{0}?filename={1}
        :x:/@p5.web.get-location-url?value
        :x:/@p5.html.url-encode?value





/*
 * Then displaying SHA1 checksum of main binaries.zip file.
 */
p5.crypto.hash.create-sha1-file:~/temp/hyperbuild-output/binaries.zip
  hex:true
create-widget
  parent:output
  style:"clear:both;margin-bottom:0;"
  innerValue:SHA1 checksum of binaries.zip; '{0}'
    :x:/@p5.crypto.hash.create-sha1-file?value
