/*
 * File responsible for creating a build.
 *
 * Node below is used to separate the arguments supplued during invocation from
 * the rest of the file.
 */
.signal





/*
 * Deleting any previous "output folders", if they exist.
 */
if
  fetch:x:/0/0?value
    folder-exists:~/temp/hyperbuild-output/

  /*
   * Folder exists from before.
   */
  delete-folder:~/temp/hyperbuild-output/





/*
 * Creating a temporary output folder.
 */
create-folder:~/temp/hyperbuild-output/





/*
 * Creating a "/p5/" folder inside of our temp output folder, which will hold
 * our main p5.website content.
 */
create-folder:~/temp/hyperbuild-output/p5/





/*
 * Copying all relevant files into output folder.
 *
 * First creating our "/bin/" folder, and copying all DLLs.
 */
create-folder:~/temp/hyperbuild-output/p5/bin/
list-files:/bin/
  filter:.dll
copy-file:x:/@list-files/*?name
  dest:~/temp/hyperbuild-output/p5/bin/





/*
 * Copying main Default.aspx file.
 */
copy-file:/Default.aspx
  dest:~/temp/hyperbuild-output/p5/





/*
 * Copying the icon file.
 */
copy-file:/favicon.ico
  dest:~/temp/hyperbuild-output/p5/





/*
 * Copying our Global.asax file.
 */
copy-file:/Global.asax
  dest:~/temp/hyperbuild-output/p5/





/*
 * Copying startup.hl
 */
copy-file:/startup.hl
  dest:~/temp/hyperbuild-output/p5/





/*
 * Copying our "/modules/" folder.
 *
 * Notice, this has to be done such that we don't copy any "/.git/" folders, or
 * any "/.gitignore" files, since these are protected from the web server user account,
 * at least on Windows machines.
 *
 * Hence, first we statically create our "/modules/" folder inside of our build output folder.
 */
create-folder:~/temp/hyperbuild-output/p5/modules/





/*
 * Then we package all modules user wants to include in main distro.
 */
for-each:x:/@.signal/--/*/core/*?name

  /*
   * Figuring out currently iterated folder's name, and creating it, inside of our
   * output folder.
   */
  split:x:/@_dp?value
    =:/
  create-folder:~/temp/hyperbuild-output/p5/modules/{0}/
    :x:/@split/0/-?name

  /*
   * Listing all folders inside of our currently iterated folder, making sure we
   * exclude any "/.git/" folders.
   */
  list-folders:x:/@_dp?value
  set:x:@"/@list-folders/*/""~/.git/"""

  /*
   * Iterating through all sub-folders, inside of currently iterated modules folder.
   * Now with any "/.git/" folders removed.
   */
  for-each:x:/@list-folders/*?name

    /*
     * Figuring out folder's name, before we copy its content to output folder.
     */
    split:x:/@_dp?value
      =:/
    copy-folder:x:/@_dp?value
      dest:~/temp/hyperbuild-output/p5/modules/{0}/{1}/
        :x:/@split/@split/0/-?name
        :x:/@split/0/-?name

  /*
   * Then listing all files within currently iterated modules folder, and copying
   * them to our currently iterated modules folder. Making sure we remove any "/.gitignore"
   * files in the process.
   */
  list-files:x:/@_dp?value
  set:x:@"/@list-files/*/""=~/.gitignore"""

  /*
   * Iterating through each file from above result, and copying it to module's output folder.
   */
  for-each:x:/@list-files/*?name
    split:x:/@_dp?value
      =:/
    copy-file:x:/@_dp?value
      dest:~/temp/hyperbuild-output/p5/modules/{0}/{1}
        :x:/@split/0/-2?name
        :x:/@split/0/-?name





/*
 * Creating our default "/users/" folder structure.
 *
 * By default, there is only one folder inside of here, which is the root account's
 * folder, which is the only account that will be by default created on the system as it
 * is being setup on some server.
 *
 * Notice, since our [zip] event won't handle empty folders, every folder
 * needs at least one file, otherwise it won't be included in the zipping process.
 *
 * Hence, we create at least one README.md file, for each folder we create beneath.
 */
create-folder:~/temp/hyperbuild-output/p5/users/
create-folder:~/temp/hyperbuild-output/p5/users/root/
create-folder:~/temp/hyperbuild-output/p5/users/root/temp/
save-file:~/temp/hyperbuild-output/p5/users/root/temp/README.md
  src:@"## Temporary folder

This folder contains your temporary files, and will be automatically emptied every time you logout from the system."

create-folder:~/temp/hyperbuild-output/p5/users/root/documents/
create-folder:~/temp/hyperbuild-output/p5/users/root/documents/private/
save-file:~/temp/hyperbuild-output/p5/users/root/documents/private/README.md
  src:@"## Private files

This folder contains your private files, which are only accessible for you, and no other users in the system."
create-folder:~/temp/hyperbuild-output/p5/users/root/documents/public/
save-file:~/temp/hyperbuild-output/p5/users/root/documents/public/README.md
  src:@"## Public files

This folder contains your public files, which anyone with a direct link can easily access."





/*
 * Creating our default "/common/" folder structure.
 */
create-folder:~/temp/hyperbuild-output/p5/common/

/*
 * Creating "/common/temp/" folder.
 */
create-folder:~/temp/hyperbuild-output/p5/common/temp/
save-file:~/temp/hyperbuild-output/p5/common/temp/README.md
  src:"Temporary common files"

/*
 * Creating "/common/documents/" folder.
 */
create-folder:~/temp/hyperbuild-output/p5/common/documents/

/*
 * Creating "/common/documents/private/" folder.
 */
create-folder:~/temp/hyperbuild-output/p5/common/documents/private/
save-file:~/temp/hyperbuild-output/p5/common/documents/private/README.md
  src:"Common private files"

/*
 * Creating "/common/documents/public/" folder.
 */
create-folder:~/temp/hyperbuild-output/p5/common/documents/public/
save-file:~/temp/hyperbuild-output/p5/common/documents/public/README.md
  src:"Common public files"





/*
 * Preparing to zip entire "/hyperbuild-output/p5/" folder.
 */
list-files:~/temp/hyperbuild-output/p5/
list-folders:~/temp/hyperbuild-output/p5/
for-each:x:(/@list-files|/@list-folders)/*?name
  eval-x:x:/+/*/*
  add:x:/../*/zip
    src
      src:x:/@_dp?value





/*
 * Checking if caller specified he wanted to include his web.config file.
 */
if:x:/@.signal/--/include-web-config?value

  /*
   * Yup, web.config going into the build, loading it as XML, and making sure we
   * replace its "startup app", before we serialize it into zip file.
   */
  load-file:/web.config

  /*
   * Saving file to "/temp/" folder, before adding it as web.config into build zip file.
   */
  save-file:~/temp/web.config.xml
    src:x:/@load-file/*?value
  add:x:/../*/zip
    src
      src:~/temp/web.config.xml
        as:web.config





/*
 * Creating our resulting zip file for our main core distribution, which now should
 * contain all the sources caller specified, including possibly his web.config file.
 */
zip:~/temp/hyperbuild-output/binaries.zip





/*
 * Downloading file to client.
 */
micro.download.file:~/temp/hyperbuild-output/binaries.zip
