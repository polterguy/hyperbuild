
/*
 * File responsible for creating a build.
 *
 * Node below is used to separate the arguments supplued during invocation from
 * the rest of the file.
 */
.signal





/*
 * Deleting any previous "output folders", if they exist.
 */
if
  fetch:x:/0/0?value
    folder-exists:~/temp/hyperbuild-output/

  /*
   * Folder exists from before.
   */
  delete-folder:~/temp/hyperbuild-output/





/*
 * Creating a temporary output folder.
 */
create-folder:~/temp/hyperbuild-output/





/*
 * Creating a "/p5/" folder inside of our temp output folder, which will hold
 * our main p5.website content.
 */
create-folder:~/temp/hyperbuild-output/p5/





/*
 * Copying all relevant files into output folder.
 *
 * First creating our "/bin/" folder, and copying all DLLs.
 */
create-folder:~/temp/hyperbuild-output/p5/bin/
list-files:/bin/
  filter:.dll
copy-file:x:/@list-files/*?name
  dest:~/temp/hyperbuild-output/p5/bin/





/*
 * Copying main Default.aspx file.
 */
copy-file:/Default.aspx
  dest:~/temp/hyperbuild-output/p5/





/*
 * Copying our Global.asax file.
 */
copy-file:/Global.asax
  dest:~/temp/hyperbuild-output/p5/





/*
 * Copying startup.hl
 */
copy-file:/startup.hl
  dest:~/temp/hyperbuild-output/p5/





/*
 * Copying our "/modules/" folder.
 *
 * Notice, this has to be done such that we don't copy any "/.git/" folders, or
 * any "/.gitignore" files, since these are protected from the web server user account,
 * at least on Windows machines.
 *
 * Hence, first we statically create our "/modules/" folder inside of our build output folder.
 */
create-folder:~/temp/hyperbuild-output/p5/modules/





/*
 * Then we we list all folders inside of our root "/modules/" folder, and iterate through
 * all of these folders, and copies their content into our output folder.
 *
 * If we don't exclude "/.git/" folders and "/.gitignore" files this way, it will be
 * impossible to delete these folders/files later, since they're "protected" from the
 * web server's user account on Windows.
 *
 * Fuck Microsoft, this used to be ONE FREAKIN' LINE OF CODE before I started checking if
 * it worked on Windows ...!!
 */
list-folders:/modules/
for-each:x:/@list-folders/*?name

  /*
   * Figuring out currently iterated folder's name, and creating it, inside of our
   * output folder.
   */
  split:x:/@_dp?value
    =:/
  create-folder:~/temp/hyperbuild-output/p5/modules/{0}/
    :x:/@split/0/-?name

  /*
   * Listing all folders inside of our currently iterated folder, making sure we
   * exclude any "/.git/" folders.
   */
  list-folders:x:/@_dp?value
  set:x:@"/@list-folders/*/""~/.git/"""

  /*
   * Iterating through all sub-folders, inside of currently iterated modules folder.
   * Now with any "/.git/" folders removed.
   */
  for-each:x:/@list-folders/*?name

    /*
     * Figuring out folder's name, before we copy its content to output folder.
     */
    split:x:/@_dp?value
      =:/
    copy-folder:x:/@_dp?value
      dest:~/temp/hyperbuild-output/p5/modules/{0}/{1}/
        :x:/@split/@split/0/-?name
        :x:/@split/0/-?name

  /*
   * Then listing all files within currently iterated modules folder, and copying
   * them to our currently iterated modules folder. Making sure we remove any "/.gitignore"
   * files in the process.
   */
  list-files:x:/@_dp?value
  set:x:@"/@list-files/*/""=~/.gitignore"""

  /*
   * Iterating through each file from above result, and copying it to module's output folder.
   */
  for-each:x:/@list-files/*?name
    split:x:/@_dp?value
      =:/
    copy-file:x:/@_dp?value
      dest:~/temp/hyperbuild-output/p5/modules/{0}/{1}
        :x:/@split/0/-2?name
        :x:/@split/0/-?name





/*
 * Figuring out which modules caller wanted to include in the main release, and
 * if he wants to build additional modules as free standing zip files.
 */
list-folders:~/temp/hyperbuild-output/p5/modules/
for-each:x:/@list-folders/*?name
  split:x:/@_dp?value
    =:/

  /*
   * Checking if currently iterated folder should have its own package file.
   */
  if:x:/@.signal/--/modules/*/{0}
    :x:/@split/0/-?name

    /*
     * Caller wants to create an additional module distribution file from the currently
     * iterated folder.
     */
    zip:~/temp/hyperbuild-output/{0}.zip
      :x:/@split/0/-?name
      src:~/temp/hyperbuild-output/p5/modules/{0}/
        :x:/@split/0/-?name

    /*
     * Checking if caller supplied PGP password, at which point we cryptographically
     * sign the zip file.
     */
    if:x:/../*/password?value
      and:x:/../*/password?value
        !=:

      /*
       * Now we can cryptographically sign the module, with the specified PGP key,
       * extracting it from our GnuPG context, using the supplied password.
       */
      eval-x:x:/+|/+/**
      p5.mime.save:~/temp/hyperbuild-output/{0}.zip.pgp
        :x:/@split/0/-?name
        application:zip
          filename:~/temp/hyperbuild-output/{0}.zip
            :x:/@split/0/-?name
          sign
            fingerprint:x:/../*/fingerprint?value
              password:x:/../*/password?value

      /*
       * Deleting zip file, since caller specified he wanted to cryptographically
       * sign his modules.
       */
      delete-file:~/temp/hyperbuild-output/{0}.zip
        :x:/@split/0/-?name

  /*
   * Then we delete the module from the main release, unless user for some reasons
   * wanted to also distribute it in his main binaries.zip file.
   */
  if:x:/@.signal/--/core/*/{0}
    :x:/@split/0/-?name
    not
    delete-folder:~/temp/hyperbuild-output/p5/modules/{0}/
      :x:/@split/0/-?name





/*
 * Creating our default "/users/" folder structure.
 *
 * By default, there is only one folder inside of here, which is the root account's
 * folder, which is the only account that will be by default created on the system as it
 * is being setup on some server.
 *
 * Notice, since our [zip] event won't handle empty folders, every folder
 * needs at least one file, otherwise it won't be included in the zipping process.
 *
 * Hence, we create at least one README.md file, for each folder we create beneath.
 */
create-folder:~/temp/hyperbuild-output/p5/users/
create-folder:~/temp/hyperbuild-output/p5/users/root/
create-folder:~/temp/hyperbuild-output/p5/users/root/temp/
save-file:~/temp/hyperbuild-output/p5/users/root/temp/README.md
  src:@"## Temporary folder

This folder contains your temporary files, and will be automatically emptied every time you logout from the system."

create-folder:~/temp/hyperbuild-output/p5/users/root/documents/
create-folder:~/temp/hyperbuild-output/p5/users/root/documents/private/
save-file:~/temp/hyperbuild-output/p5/users/root/documents/private/README.md
  src:@"## Private files

This folder contains your private files, which are only accessible for you, and no other users in the system."
create-folder:~/temp/hyperbuild-output/p5/users/root/documents/public/
save-file:~/temp/hyperbuild-output/p5/users/root/documents/public/README.md
  src:@"## Public files

This folder contains your public files, which anyone with a direct link can easily access."





/*
 * Creating our default "/common/" folder structure.
 */
create-folder:~/temp/hyperbuild-output/p5/common/
create-folder:~/temp/hyperbuild-output/p5/common/documents/
create-folder:~/temp/hyperbuild-output/p5/common/documents/private/
save-file:~/temp/hyperbuild-output/p5/common/documents/private/README.md
  src:"Common public files"
create-folder:~/temp/hyperbuild-output/p5/common/documents/public/
save-file:~/temp/hyperbuild-output/p5/common/documents/public/README.md
  src:"Common private files"





/*
 * Preparing to zip entire "/hyperbuild-output/p5/" folder.
 */
list-files::~/temp/hyperbuild-output/p5/
list-folders:~/temp/hyperbuild-output/p5/
for-each:x:(/@list-files|/@list-folders)/*?name
  eval-x:x:/+/*/*
  add:x:/../*/zip
    src
      src:x:/@_dp?value





/*
 * Checking if bazar exists in main distro, and user wanted to build additional
 * modules, and if so, we exchange the content of the "bazars.hl" file, to the
 * given [bazar] argument's value.
 */
if
  fetch:x:/0/0?value
    folder-exists:~/temp/hyperbuild-output/p5/modules/bazar/configuration/
  and:x:/@.signal/--/bazar?value
  and:x:/@.signal/--/bazar?value
    !=:

  /*
   * An explicit bazar declaration was supplied, and caller included Bazar in his
   * main distribution - Hence we replace the content of the included "bazars.hl"
   * file with whatever [bazar] argument caller supplied.
   */
  save-file:~/temp/hyperbuild-output/p5/modules/bazar/configuration/bazars.hl
    src:x:/@.signal/--/bazar?value

  /*
   * Then we update the "trusted-app-distributors.hl" file to contain the fingerprint
   * of the key the user supplied, if any.
   */
  if:x:/../*/password?value
    and:x:/../*/password?value
      !=:

    /*
     * User supplied a [password] argument, hence we exchange the content of our
     * "trusted-app-distributors.hl" file with his [fingerprint], and his [key-id].
     */
    _trusted
    add:x:/@_trusted
      src:x:/../*/fingerprint
    p5.crypto.get-key-details:x:/../*/fingerprint?value
    add:x:/@_trusted/*
      src:@"key-id:0x{0}"
        :x:/@p5.crypto.get-key-details/*/*/id?value
    lambda2hyper:x:/@_trusted/*
    save-file:~/temp/hyperbuild-output/p5/modules/bazar/configuration/trusted-app-distributors.hl
      src:x:/@lambda2hyper?value





/*
 * Checking if caller specified he wanted to include his web.config file.
 */
if:x:/@.signal/--/include-web-config?value

  /*
   * Sanity checking that "startup-app" is actually included in main binaries.zip build.
   */
  split:x:/../*/startup-app?value
    =:/
  if:x:/../*/core/*/{0}
    :x:/@split/0/-2?name
    not
    throw:Oops, you need to actually put your startup-app into the main core build

  /*
   * Yup, web.config going into the build, loading it as XML, and making sure we
   * replace its "startup app", before we serialize it into zip file.
   */
  load-file:/web.config
  xml2lambda:x:/@load-file/*?value

  /*
   * Setting "startup-app"
   */
  set:x:/@xml2lambda/**/appSettings/**/=p5.core.default-app/./*/\@value?value
    src:x:/../*/startup-app?value

  /*
   * Transforming above lambda to XML again.
   */
  lambda2xml:x:/@xml2lambda/*

  /*
   * Saving file to "/temp/" folder, before adding it as web.config into build zip file.
   */
  save-file:~/temp/web.config.xml
    src:x:/@lambda2xml?value
  add:x:/../*/zip
    src
      src:~/temp/web.config.xml
        as:web.config





/*
 * Creating our resulting zip file for our main core distribution, which now should
 * contain all the sources caller specified, including possibly his web.config file.
 */
zip:~/temp/hyperbuild-output/binaries.zip





/*
 * When the build is done, we create all links to download all resulting files.
 *
 * But first, we remove all existing content in output widget.
 */
clear-widget:build-configuration
create-container-widget:output
  parent:build-configuration
create-widget
  parent:output
  element:h3
  innerValue:Result
list-files:~/temp/hyperbuild-output/
  filter:.zip|.pgp
for-each:x:/@list-files/*?name

  /*
   * Figuring out filename.
   */
  split:x:/@_dp?value
    =:/
  eval-x:x:/+/**/.file
  create-widget
    parent:output
    element:a
    style:"display:block;float:left;margin-right:25px;margin-bottom:1rem;"
    href:#
    innerValue:x:/@split/0/-?name
    onclick

      /*
       * Forward evaluated above.
       */
      .file:x:/@split/0/-?name

      /*
       * Initiating download.
       */
      p5.web.get-location-url
      p5.html.url-encode:x:/@.file?value
      p5.web.set-location:{0}?filename={1}
        :x:/@p5.web.get-location-url?value
        :x:/@p5.html.url-encode?value





/*
 * Then displaying SHA1 checksum of main binaries.zip file.
 */
p5.crypto.hash.create-sha1-file:~/temp/hyperbuild-output/binaries.zip
  hex:true
create-widget
  parent:output
  style:"clear:both;margin-bottom:0;"
  innerValue:SHA1 checksum of binaries.zip; '{0}'
    :x:/@p5.crypto.hash.create-sha1-file?value





/*
 * Then displaying an example Bazar content file, but only if user is actually
 * building a Bazar (meaning; Caller has provided a PGP key [password]).
 */
if:x:/../*/password?value
  and:x:/../*/password?value
    !=:

  /*
   * User provided a [password] argument.
   */
  create-widget
    parent:output
    widgets
      br
      label
        innerValue:Example bazar content file
      literal
        element:textarea
        rows:20
        class:fill
        oninit

          /*
           * Loading the example Bazar that is the default bazar in P5.
           */
          load-file:/modules/bazar/bazars/apps.hl
            convert:false
          set-widget-property:x:/../*/_event?value
            innerValue:x:/@load-file/*?value
